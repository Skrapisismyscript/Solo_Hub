repeat task.wait() until game:IsLoaded() and game.Players and game.Players.LocalPlayer
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
local Window = Rayfield:CreateWindow({
	Name = "Solo Hub",
	LoadingTitle = "ABA",
	LoadingSubtitle = "By Sri#0584",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Solo Hub ABA"
	},
        Discord = {
        	Enabled = false,
        	Invite = "sirius", -- The Discord invite code, do not include discord.gg/
        	RememberJoins = true -- Set this to false to make them join the discord every time they load it up
        },
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Sirius Hub",
		Subtitle = "Key System",
		Note = "Join the discord (discord.gg/sirius)",
		FileName = "Solo Hub Key",
		SaveKey = true,
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = "Hello"
	}
})

local Tab = Window:CreateTab("Main", 4483362458)
local Section = Tab:CreateSection("Aba afk world")

Rayfield:Notify({
    Title = "Solo Hub",
    Content = "Aba script loaded",
    Duration = 6.5,
    Image = 4483362458,
    Actions = { -- Notification Buttons
        Ignore = {
            Name = "Okay!",
            Callback = function()
                print("The user tapped Okay!")
            end
		},
	},
})

_G.afkfarm = false
local Toggle = Tab:CreateToggle({
	Name = "Afk farm",
	CurrentValue = false,
	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.afkfarm = Value
	end,
})


_G.rendering = false
local Toggle = Tab:CreateToggle({
	Name = "Disable 3d render",
	CurrentValue = false,
	Flag = "Toggle12", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.rendering = Value
	end,
})

_G.world = false
local Toggle = Tab:CreateToggle({
	Name = " auto Tp to afk world",
	CurrentValue = false,
	Flag = "Toggle123", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.world = Value
	end,
})
_G.entertimer = 0
local Slider = Tab:CreateSlider({
	Name = "Timer to hop",
	Range = {0, 100},
	Increment = 1,
	Suffix = "timerchange",
	CurrentValue = 60,
	Flag = "Slider123", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.entertimer = Value
	end,
})

_G.delay = 0
local Slider = Tab:CreateSlider({
	Name = "Delay",
	Range = {0, 100},
	Increment = 1,
	Suffix = "delaychanger",
	CurrentValue = 0,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.delay = Value
	end,
})
_G.speed = 0
local Slider = Tab:CreateSlider({
	Name = "Speed",
	Range = {0, 100},
	Increment = 1,
	Suffix = "speedchanger",
	CurrentValue = 0,
	Flag = "Slider12", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		_G.speed = Value
	end,
})

local Section = Tab:CreateSection("Credits")
local Paragraph = Tab:CreateParagraph({Title = "made by Sri#0584", Content = "https://discord.gg/4bsNjjnzEQ"})
--//Scripts//--
if _G.webhook == nil or false then
    _G.webhook = ""
end
local function timer()
    local ok;
    ok = tonumber(string.match(game:GetService("Workspace").Message.Text, "%d+"))
    return ok
end



local function serverhop()
    local serverList = {}
                for _, v in ipairs(game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")).data) do
                    if v.playing and type(v) == "table" and v.maxPlayers > v.playing and v.id ~= game.JobId then
                        serverList[#serverList + 1] = v.id
                    end
                end
                if #serverList > 0 then
                    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, serverList[math.random(1, #serverList)])
                else
                    error("No servers found")
                end
end


task.spawn(function()
    while task.wait(_G.speed) do
        pcall(function()
                if _G.afkfarm then
                    if timer() > _G.entertimer then
                        task.wait(_G.delay)
                        serverhop()
                    else
                        print(_G.webhook)
                        if sentWebhook == false then
                            local goldValue = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("ScreenGui").TextLabel.Text

                            local url = _G.webhook
                            local data = {
                            ["content"] = "**Found a server with under the specified timer!**",
                            ["embeds"] = {
                                {
                                    ["title"] = "**Your **" .. goldValue,
                                    ["description"] = "Username: ||".. game.Players.LocalPlayer.Name .. "||",
                                    ["type"] = "rich",
                                    ["color"] = tonumber(0x7269da),
                                    
                                }
                            }
                            }
                            local newdata = game:GetService("HttpService"):JSONEncode(data)

                            local headers = {
                            ["content-type"] = "application/json"
                            }
                            request = http_request or request or HttpPost or syn.request
                            local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
                            request(abcdef)
                            sentWebhook = true
                        end
                    end
                end
            end)
        end
    end)


task.spawn(function()
        while task.wait(_G.speed) do
            pcall(function()
                if _G.rendering then     
                    game:GetService("RunService"):Set3dRenderingEnabled(false)
                elseif _G.rendering == false or nil then
                    game:GetService("RunService"):Set3dRenderingEnabled(true)
                end
            end)
        end
    end)

    task.spawn(function()
        while task.wait(_G.speed) do
            pcall(function()
                if _G.world then
                    if game.PlaceId == 1458767429 then
                        game:GetService("TeleportService"):Teleport(5411459567)
                    end
                end
            end)
        end
    end)


print("loaded")

--//Load config//--
Rayfield:LoadConfiguration()
